#! /usr/bin/perl
# 
use strict;
use warnings;
use POSIX ();
use Debconf::Client::ConfModule qw(:all);
version('2.0');
my $capb=capb("backup");

$|=1;
# Predefined values:
my $version         = "@abiname@@localversion@";
my $kimage          = "@image-stem@";
my $prerm_hook      = '';       #Normally we do not
my $package_name    = "linux-image-$version";

#known variables
my $realimageloc    = "/boot/";
my $CONF_LOC        = '/etc/kernel-img.conf';

# Variables used
my $image='';
my $ret=0;
my $seen='';
my $answer='';
my $running = '';
my $WouldInvalidate = 0;

# Ignore all invocations uxcept when called on to remove
exit 0 unless ($ARGV[0] && $ARGV[0] =~ /remove/) ;

if (-r "$CONF_LOC" && -f "$CONF_LOC"  ) {
  if (open(CONF, "$CONF_LOC")) {
    while (<CONF>) {
      chomp;
      s/\#.*$//g;
      next if /^\s*$/;

      $prerm_hook      = "$1"  if /prerm_hook\s*=\s*(\S+)/i;
    }
    close CONF;
  }
}


#check to see if we are trying to remove a running kernel
# if so we abort right now.
chop($running=`uname -r`);
if ($running eq $version) {
  my $question = "${package_name}/prerm/removing-running-kernel-$version";

  ($ret,$seen) = fset ("$question", 'seen', 'false');
  die "Error setting debconf flags in $question: $seen" if $ret;

  $ret = subst("$question", 'running', "$running");
  die "Error setting debconf substitutions in $question: $seen" if $ret;

  ($ret,$seen) = input('critical', "$question");
  if ($ret && $ret != 30 ) {
    die "Error setting debconf question $question: $seen";
  }

  ($ret,$seen) = go ();
  if ($ret && $ret != 30 ) {
    die "Error asking debconf question $question: $seen";
  }

  ($ret,$answer) = get("$question");
  die "Error retreiving answer for $question: $answer" if $ret;

  if ($answer =~ /^(y|t)/i) {
    print STDERR "Aborting removal of running kernel image.\n";
    exit 1; #Operation not permitted
  }
  else {
     print STDERR "Ok, proceeding with removing running kernel image.\n";
  }
}

#Now, they have an alternate kernel which they are currently running

chdir("/") or die "could not chdir to /:$!\n";

# set the env var stem
$ENV{'STEM'} = "linux";

sub system_failure_message {
  if ($? < 0) {
    return "$!";
  } elsif (POSIX::WIFSIGNALED($?)) {
    return sprintf('signal %d', POSIX::WTERMSIG($?));
  } else {
    return sprintf('exit code %d', POSIX::WEXITSTATUS($?));
  }
}

sub run_hook {
  my $type   = shift;
  my $script = shift;

  print STDERR "Running $script.\n";
  if (system ("$script $version $realimageloc$kimage-$version")) {
    die ("$script failed: " . system_failure_message());
  }
}

my $options;
for (@ARGV) {
	s,','\\'',g;
	$options .= " '$_'";
}
$ENV{'DEB_MAINT_PARAMS'}="$options";

## Run user hook script here, if any
if (-x "$prerm_hook") {
  &run_hook("prerm", $prerm_hook);
}
if (-d "/etc/kernel/prerm.d") {
  system ("run-parts --report --exit-on-error --arg=$version " . 
          "--arg=$realimageloc$kimage-$version /etc/kernel/prerm.d") &&
            die "Failed to process /etc/kernel/prerm.d";
}

exit 0;
__END__
